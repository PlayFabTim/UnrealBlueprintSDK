#pragma once

//////////////////////////////////////////////////////////////////////////////////////////////
// Automatically generated header file for the UE4 PlayFab plugin.
// This header file contains the function definitions.
//
// API: Client
// SDK Version: 0.0.160125
//////////////////////////////////////////////////////////////////////////////////////////////

#include "OnlineBlueprintCallProxyBase.h"
#include "PlayFabBaseModel.h"
#include "PlayFabClientModels.h"
#include "PlayFabPrivatePCH.h"
#include "PlayFabClientAPI.generated.h"

DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnPlayFabClientRequestCompleted, FPlayFabBaseModel, response, bool, successful);

UCLASS(Blueprintable, BlueprintType)
class UPlayFabClientAPI : public UOnlineBlueprintCallProxyBase
{
    GENERATED_UCLASS_BODY()

public:

    UPROPERTY(BlueprintAssignable)
    FOnPlayFabClientRequestCompleted OnPlayFabResponse;

    /** Set the Request Json object */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        void SetRequestObject(UPlayFabJsonObject* JsonObject);

    /** Get the Response Json object */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        UPlayFabJsonObject* GetResponseObject();

    /** Applies percent-encoding to text */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        static FString PercentEncode(const FString& Text);

    /** Reset saved response data */
    //UFUNCTION(BlueprintCallable, Category = "PlayFab")
        void ResetResponseData();

    /** UOnlineBlueprintCallProxyBase interface */
    virtual void Activate() override;

    //////////////////////////////////////////////////////////////////////////
    // Generated PlayFab Client API Functions
    //////////////////////////////////////////////////////////////////////////

    

    ///////////////////////////////////////////////////////
    // Authentication
    //////////////////////////////////////////////////////
    /** Gets a Photon custom authentication token that can be used to securely join the player into a Photon room. See https://api.playfab.com/docs/using-photon-with-playfab/ for more details. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPhotonAuthenticationToken(FClientGetPhotonAuthenticationTokenRequest request);

    /** Signs the user in using the Android device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithAndroidDeviceID(FClientLoginWithAndroidDeviceIDRequest request);

    /** Signs the user in using a custom unique identifier generated by the title, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithCustomID(FClientLoginWithCustomIDRequest request);

    /** Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
	UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true", DeprecatedFunction))
        static UPlayFabClientAPI* LoginWithEmailAddress(FClientLoginWithEmailAddressRequest request);

	// callbacks
	DECLARE_DYNAMIC_DELEGATE_TwoParams(FDelegateOnSuccessLoginWithEmailAddress, FString, sessionTicket, FString, playFabId);
	DECLARE_DYNAMIC_DELEGATE_FourParams(FDelegateOnFailureLoginWithEmailAddress, int32, errorCode, FString, errorName, FString, errorMessage, FString, errorDetails);

	/** Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
	UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
		static UPlayFabClientAPI* PlayFabLoginWithEmailAddress(FString email, FString password,
			FDelegateOnSuccessLoginWithEmailAddress onSuccess,
			FDelegateOnFailureLoginWithEmailAddress onFailure);

	// Implements FOnPlayFabClientRequestCompleted
	UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
	void HelperLoginWithEmailAddress(FPlayFabBaseModel response, bool successful);

    /** Signs the user in using a Facebook access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithFacebook(FClientLoginWithFacebookRequest request);

    /** Signs the user in using an iOS Game Center player identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithGameCenter(FClientLoginWithGameCenterRequest request);

    /** Signs the user in using a Google account access token, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithGoogleAccount(FClientLoginWithGoogleAccountRequest request);

    /** Signs the user in using the vendor-specific iOS device identifier, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithIOSDeviceID(FClientLoginWithIOSDeviceIDRequest request);

    /** Signs the user in using a Kongregate player account. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithKongregate(FClientLoginWithKongregateRequest request);

    /** Signs the user into the PlayFab account, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithPlayFab(FClientLoginWithPlayFabRequest request);

    /** Signs the user in using a PlayStation Network authentication code, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithPSN(FClientLoginWithPSNRequest request);

    /** Signs the user in using a Steam authentication ticket, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithSteam(FClientLoginWithSteamRequest request);

    /** Signs the user in using a Xbox Live Token, returning a session identifier that can subsequently be used for API calls which require an authenticated user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LoginWithXbox(FClientLoginWithXboxRequest request);

    /** Registers a new Playfab user account, returning a session identifier that can subsequently be used for API calls which require an authenticated user. You must supply either a username or an email address. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true", DeprecatedFunction))
        static UPlayFabClientAPI* RegisterPlayFabUser(FClientRegisterPlayFabUserRequest request);

	DECLARE_DYNAMIC_DELEGATE_ThreeParams(FDelegateOnSuccessRegisterPlayFabUser, FString, sessionTicket, FString, playFabId, FString, username);
	DECLARE_DYNAMIC_DELEGATE_FourParams(FDelegateOnFailureRegisterPlayFabUser, int32, errorCode, FString, errorName, FString, errorMessage, FString, errorDetails);

	/** Registers a new Playfab user account, returning a session identifier that can subsequently be used for API calls which require an authenticated user. You must supply either a username or an email address. */
	UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
		static UPlayFabClientAPI* PlayFabRegisterPlayFabUser(FString username, FString email, FString password,
			bool requireBothUsernameAndEmail,
			FString displayName, FString origination,
			FDelegateOnSuccessRegisterPlayFabUser onSuccess,
			FDelegateOnFailureRegisterPlayFabUser onFailure);

	// Implements FOnPlayFabClientRequestCompleted
	UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Authentication ", meta = (BlueprintInternalUseOnly = "true"))
		void HelperRegisterPlayFabUser(FPlayFabBaseModel response, bool successful);


    ///////////////////////////////////////////////////////
    // Account Management
    //////////////////////////////////////////////////////
    /** Adds playfab username/password auth to an existing semi-anonymous account created via a 3rd party auth method. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* AddUsernamePassword(FClientAddUsernamePasswordRequest request);

    /** Retrieves the user's PlayFab account details */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetAccountInfo(FClientGetAccountInfoRequest request);

    /** Retrieves the unique PlayFab identifiers for the given set of Facebook identifiers. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPlayFabIDsFromFacebookIDs(FClientGetPlayFabIDsFromFacebookIDsRequest request);

    /** Retrieves the unique PlayFab identifiers for the given set of Game Center identifiers (referenced in the Game Center Programming Guide as the Player Identifier). */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPlayFabIDsFromGameCenterIDs(FClientGetPlayFabIDsFromGameCenterIDsRequest request);

    /** Retrieves the unique PlayFab identifiers for the given set of Google identifiers. The Google identifiers are the IDs for the user accounts, available as "id" in the Google+ People API calls. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPlayFabIDsFromGoogleIDs(FClientGetPlayFabIDsFromGoogleIDsRequest request);

    /** Retrieves the unique PlayFab identifiers for the given set of Kongregate identifiers. The Kongregate identifiers are the IDs for the user accounts, available as "user_id" from the Kongregate API methods(ex: http://developers.kongregate.com/docs/client/getUserId). */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPlayFabIDsFromKongregateIDs(FClientGetPlayFabIDsFromKongregateIDsRequest request);

    /** Retrieves the unique PlayFab identifiers for the given set of PlayStation Network identifiers. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPlayFabIDsFromPSNAccountIDs(FClientGetPlayFabIDsFromPSNAccountIDsRequest request);

    /** Retrieves the unique PlayFab identifiers for the given set of Steam identifiers. The Steam identifiers  are the profile IDs for the user accounts, available as SteamId in the Steamworks Community API calls. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPlayFabIDsFromSteamIDs(FClientGetPlayFabIDsFromSteamIDsRequest request);

    /** Retrieves all requested data for a user in one unified request. By default, this API returns all  data for the locally signed-in user. The input parameters may be used to limit the data retrieved to any subset of the available data, as well as retrieve the available data for a different user. Note that certain data, including inventory, virtual currency balances, and personally identifying information, may only be retrieved for the locally signed-in user. In the example below, a request is made for the account details, virtual currency balances, and specified user data for the locally signed-in user. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetUserCombinedInfo(FClientGetUserCombinedInfoRequest request);

    /** Links the Android device identifier to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkAndroidDeviceID(FClientLinkAndroidDeviceIDRequest request);

    /** Links the custom identifier, generated by the title, to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkCustomID(FClientLinkCustomIDRequest request);

    /** Links the Facebook account associated with the provided Facebook access token to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkFacebookAccount(FClientLinkFacebookAccountRequest request);

    /** Links the Game Center account associated with the provided Game Center ID to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkGameCenterAccount(FClientLinkGameCenterAccountRequest request);

    /** Links the currently signed-in user account to the Google account specified by the Google account access token */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkGoogleAccount(FClientLinkGoogleAccountRequest request);

    /** Links the vendor-specific iOS device identifier to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkIOSDeviceID(FClientLinkIOSDeviceIDRequest request);

    /** Links the Kongregate identifier to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkKongregate(FClientLinkKongregateAccountRequest request);

    /** Links the PlayStation Network account associated with the provided access code to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkPSNAccount(FClientLinkPSNAccountRequest request);

    /** Links the Steam account associated with the provided Steam authentication ticket to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkSteamAccount(FClientLinkSteamAccountRequest request);

    /** Links the Xbox Live account associated with the provided access code to the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LinkXboxAccount(FClientLinkXboxAccountRequest request);

    /** Forces an email to be sent to the registered email address for the user's account, with a link allowing the user to change the password */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* SendAccountRecoveryEmail(FClientSendAccountRecoveryEmailRequest request);

    /** Unlinks the related Android device identifier from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkAndroidDeviceID(FClientUnlinkAndroidDeviceIDRequest request);

    /** Unlinks the related custom identifier from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkCustomID(FClientUnlinkCustomIDRequest request);

    /** Unlinks the related Facebook account from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkFacebookAccount(FClientUnlinkFacebookAccountRequest request);

    /** Unlinks the related Game Center account from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkGameCenterAccount(FClientUnlinkGameCenterAccountRequest request);

    /** Unlinks the related Google account from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkGoogleAccount(FClientUnlinkGoogleAccountRequest request);

    /** Unlinks the related iOS device identifier from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkIOSDeviceID(FClientUnlinkIOSDeviceIDRequest request);

    /** Unlinks the related Kongregate identifier from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkKongregate(FClientUnlinkKongregateAccountRequest request);

    /** Unlinks the related PSN account from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkPSNAccount(FClientUnlinkPSNAccountRequest request);

    /** Unlinks the related Steam account from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkSteamAccount(FClientUnlinkSteamAccountRequest request);

    /** Unlinks the related Xbox Live account from the user's PlayFab account */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlinkXboxAccount(FClientUnlinkXboxAccountRequest request);

    /** Updates the title specific display name for the user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Account Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UpdateUserTitleDisplayName(FClientUpdateUserTitleDisplayNameRequest request);



    ///////////////////////////////////////////////////////
    // Player Data Management
    //////////////////////////////////////////////////////
    /** Retrieves a list of ranked friends of the current player for the given statistic, starting from the indicated point in the leaderboard */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetFriendLeaderboard(FClientGetFriendLeaderboardRequest request);

    /** Retrieves a list of ranked friends of the current player for the given statistic, centered on the currently signed-in user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetFriendLeaderboardAroundCurrentUser(FClientGetFriendLeaderboardAroundCurrentUserRequest request);

    /** Retrieves a list of ranked friends of the current player for the given statistic, centered on the requested PlayFab user. If PlayFabId is empty or null will return currently logged in user. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetFriendLeaderboardAroundPlayer(FClientGetFriendLeaderboardAroundPlayerRequest request);

    /** Retrieves a list of ranked users for the given statistic, starting from the indicated point in the leaderboard */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetLeaderboard(FClientGetLeaderboardRequest request);

    /** Retrieves a list of ranked users for the given statistic, centered on the currently signed-in user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetLeaderboardAroundCurrentUser(FClientGetLeaderboardAroundCurrentUserRequest request);

    /** Retrieves a list of ranked users for the given statistic, centered on the requested player. If PlayFabId is empty or null will return currently logged in user. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetLeaderboardAroundPlayer(FClientGetLeaderboardAroundPlayerRequest request);

    /** Retrieves the title-specific custom data for the user which is readable and writable by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetUserData(FClientGetUserDataRequest request);

    /** Retrieves the publisher-specific custom data for the user which is readable and writable by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetUserPublisherData(FClientGetUserDataRequest request);

    /** Retrieves the publisher-specific custom data for the user which can only be read by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetUserPublisherReadOnlyData(FClientGetUserDataRequest request);

    /** Retrieves the title-specific custom data for the user which can only be read by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetUserReadOnlyData(FClientGetUserDataRequest request);

    /** Retrieves the details of all title-specific statistics for the user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetUserStatistics(FClientGetUserStatisticsRequest request);

    /** Creates and updates the title-specific custom data for the user which is readable and writable by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UpdateUserData(FClientUpdateUserDataRequest request);

    /** Creates and updates the publisher-specific custom data for the user which is readable and writable by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UpdateUserPublisherData(FClientUpdateUserDataRequest request);

    /** Updates the values of the specified title-specific statistics for the user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UpdateUserStatistics(FClientUpdateUserStatisticsRequest request);



    ///////////////////////////////////////////////////////
    // Title-Wide Data Management
    //////////////////////////////////////////////////////
    /** Retrieves the specified version of the title's catalog of virtual goods, including all defined properties */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Title-Wide Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCatalogItems(FClientGetCatalogItemsRequest request);

    /** Retrieves the set of items defined for the specified store, including all prices defined */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Title-Wide Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetStoreItems(FClientGetStoreItemsRequest request);

    /** Retrieves the key-value store of custom title settings */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Title-Wide Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetTitleData(FClientGetTitleDataRequest request);

    /** Retrieves the title news feed, as configured in the developer portal */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Title-Wide Data Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetTitleNews(FClientGetTitleNewsRequest request);



    ///////////////////////////////////////////////////////
    // Player Item Management
    //////////////////////////////////////////////////////
    /** Increments the user's balance of the specified virtual currency by the stated amount */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* AddUserVirtualCurrency(FClientAddUserVirtualCurrencyRequest request);

    /** Confirms with the payment provider that the purchase was approved (if applicable) and adjusts inventory and virtual currency balances as appropriate */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* ConfirmPurchase(FClientConfirmPurchaseRequest request);

    /** Consume uses of a consumable item. When all uses are consumed, it will be removed from the player's inventory. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* ConsumeItem(FClientConsumeItemRequest request);

    /** Retrieves the specified character's current inventory of virtual goods */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCharacterInventory(FClientGetCharacterInventoryRequest request);

    /** Retrieves a completed purchase along with its current PlayFab status. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPurchase(FClientGetPurchaseRequest request);

    /** Retrieves the user's current inventory of virtual goods */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetUserInventory(FClientGetUserInventoryRequest request);

    /** Selects a payment option for purchase order created via StartPurchase */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* PayForPurchase(FClientPayForPurchaseRequest request);

    /** Buys a single item with virtual currency. You must specify both the virtual currency to use to purchase, as well as what the client believes the price to be. This lets the server fail the purchase if the price has changed. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* PurchaseItem(FClientPurchaseItemRequest request);

    /** Adds the virtual goods associated with the coupon to the user's inventory. Coupons can be generated  via the Promotions->Coupons tab in the PlayFab Game Manager. See this post for more information on coupons:  https://playfab.com/blog/using-stores-and-coupons-game-manager/ */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* RedeemCoupon(FClientRedeemCouponRequest request);

    /** Submit a report for another player (due to bad bahavior, etc.), so that customer service representatives for the title can take action concerning potentially toxic players. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* ReportPlayer(FClientReportPlayerClientRequest request);

    /** Creates an order for a list of items from the title catalog */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* StartPurchase(FClientStartPurchaseRequest request);

    /** Decrements the user's balance of the specified virtual currency by the stated amount */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* SubtractUserVirtualCurrency(FClientSubtractUserVirtualCurrencyRequest request);

    /** Unlocks a container item in the user's inventory and consumes a key item of the type indicated by the container item */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Player Item Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UnlockContainerItem(FClientUnlockContainerItemRequest request);



    ///////////////////////////////////////////////////////
    // Friend List Management
    //////////////////////////////////////////////////////
    /** Adds the PlayFab user, based upon a match against a supplied unique identifier, to the friend list of the local user. At least one of FriendPlayFabId,FriendUsername,FriendEmail, or FriendTitleDisplayName should be initialized. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Friend List Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* AddFriend(FClientAddFriendRequest request);

    /** Retrieves the current friend list for the local user, constrained to users who have PlayFab accounts. Friends from linked accounts (Facebook, Steam) are also included. You may optionally exclude some linked services' friends. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Friend List Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetFriendsList(FClientGetFriendsListRequest request);

    /** Removes a specified user from the friend list of the local user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Friend List Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* RemoveFriend(FClientRemoveFriendRequest request);

    /** Updates the tag list for a specified user in the friend list of the local user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Friend List Management ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* SetFriendTags(FClientSetFriendTagsRequest request);



    ///////////////////////////////////////////////////////
    // IOS-Specific APIs
    //////////////////////////////////////////////////////
    /** Registers the iOS device to receive push notifications */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | IOS-Specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* RegisterForIOSPushNotification(FClientRegisterForIOSPushNotificationRequest request);

    /** Restores all in-app purchases based on the given refresh receipt. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | IOS-Specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* RestoreIOSPurchases(FClientRestoreIOSPurchasesRequest request);

    /** Validates with the Apple store that the receipt for an iOS in-app purchase is valid and that it matches the purchased catalog item */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | IOS-Specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* ValidateIOSReceipt(FClientValidateIOSReceiptRequest request);



    ///////////////////////////////////////////////////////
    // Matchmaking APIs
    //////////////////////////////////////////////////////
    /** Get details about all current running game servers matching the given parameters. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Matchmaking APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCurrentGames(FClientCurrentGamesRequest request);

    /**  Get details about the regions hosting game servers matching the given parameters. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Matchmaking APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetGameServerRegions(FClientGameServerRegionsRequest request);

    /** Attempts to locate a game session matching the given parameters. If the goal is to match the player into a specific active session, only the LobbyId is required. Otherwise, the BuildVersion, GameMode, and Region are all required parameters. Note that parameters specified in the search are required (they are not weighting factors). If a slot is found in a server instance matching the parameters, the slot will be assigned to that player, removing it from the availabe set. In that case, the information on the game session will be returned, otherwise the Status returned will be GameNotFound. Note that EnableQueue is deprecated at this time. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Matchmaking APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* Matchmake(FClientMatchmakeRequest request);

    /** Start a new game server with a given configuration, add the current player and return the connection information. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Matchmaking APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* StartGame(FClientStartGameRequest request);



    ///////////////////////////////////////////////////////
    // Android-Specific APIs
    //////////////////////////////////////////////////////
    /** Registers the Android device to receive push notifications */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Android-Specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* AndroidDevicePushNotificationRegistration(FClientAndroidDevicePushNotificationRegistrationRequest request);

    /** Validates a Google Play purchase and gives the corresponding item to the player. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Android-Specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* ValidateGooglePlayPurchase(FClientValidateGooglePlayPurchaseRequest request);



    ///////////////////////////////////////////////////////
    // Analytics
    //////////////////////////////////////////////////////
    /** Logs a custom analytics event */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Analytics ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* LogEvent(FClientLogEventRequest request);



    ///////////////////////////////////////////////////////
    // Shared Group Data
    //////////////////////////////////////////////////////
    /** Adds users to the set of those able to update both the shared data, as well as the set of users in the group. Only users in the group can add new members. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Shared Group Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* AddSharedGroupMembers(FClientAddSharedGroupMembersRequest request);

    /** Requests the creation of a shared group object, containing key/value pairs which may be updated by all members of the group. Upon creation, the current user will be the only member of the group. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Shared Group Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* CreateSharedGroup(FClientCreateSharedGroupRequest request);

    /** Retrieves the key-value store of custom publisher settings */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Shared Group Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPublisherData(FClientGetPublisherDataRequest request);

    /** Retrieves data stored in a shared group object, as well as the list of members in the group. Non-members of the group may use this to retrieve group data, including membership, but they will not receive data for keys marked as private. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Shared Group Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetSharedGroupData(FClientGetSharedGroupDataRequest request);

    /** Removes users from the set of those able to update the shared data and the set of users in the group. Only users in the group can remove members. If as a result of the call, zero users remain with access, the group and its associated data will be deleted. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Shared Group Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* RemoveSharedGroupMembers(FClientRemoveSharedGroupMembersRequest request);

    /** Adds, updates, and removes data keys for a shared group object. If the permission is set to Public, all fields updated or added in this call will be readable by users not in the group. By default, data permissions are set to Private. Regardless of the permission setting, only members of the group can update the data. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Shared Group Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UpdateSharedGroupData(FClientUpdateSharedGroupDataRequest request);



    ///////////////////////////////////////////////////////
    // Sony-specific APIs
    //////////////////////////////////////////////////////
    /** Checks for any new consumable entitlements. If any are found, they are consumed and added as PlayFab items */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Sony-specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* ConsumePSNEntitlements(FClientConsumePSNEntitlementsRequest request);

    /** Uses the supplied OAuth code to refresh the internally cached player PSN auth token */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Sony-specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* RefreshPSNAuthToken(FClientRefreshPSNAuthTokenRequest request);



    ///////////////////////////////////////////////////////
    // Server-Side Cloud Script
    //////////////////////////////////////////////////////
    /** Retrieves the title-specific URL for Cloud Script servers. This must be queried once, prior  to making any calls to RunCloudScript. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Server-Side Cloud Script ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCloudScriptUrl(FClientGetCloudScriptUrlRequest request);

    /** Triggers a particular server action, passing the provided inputs to the hosted Cloud Script. An action in this context is a handler in the JavaScript. NOTE: Before calling this API, you must call GetCloudScriptUrl to be assigned a Cloud Script server URL. When using an official PlayFab SDK, this URL is stored internally in the SDK, but GetCloudScriptUrl must still be manually called. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Server-Side Cloud Script ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* RunCloudScript(FClientRunCloudScriptRequest request);



    ///////////////////////////////////////////////////////
    // Content
    //////////////////////////////////////////////////////
    /** This API retrieves a pre-signed URL for accessing a content file for the title. A subsequent  HTTP GET to the returned URL will attempt to download the content. A HEAD query to the returned URL will attempt to  retrieve the metadata of the content. Note that a successful result does not guarantee the existence of this content -  if it has not been uploaded, the query to retrieve the data will fail. See this post for more information:  https://support.playfab.com/support/discussions/topics/1000059929 */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Content ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetContentDownloadUrl(FClientGetContentDownloadUrlRequest request);



    ///////////////////////////////////////////////////////
    // Characters
    //////////////////////////////////////////////////////
    /** Lists all of the characters that belong to a specific user. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Characters ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetAllUsersCharacters(FClientListUsersCharactersRequest request);

    /** Retrieves a list of ranked characters for the given statistic, starting from the indicated point in the leaderboard */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Characters ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCharacterLeaderboard(FClientGetCharacterLeaderboardRequest request);

    /** Retrieves the details of all title-specific statistics for the user */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Characters ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCharacterStatistics(FClientGetCharacterStatisticsRequest request);

    /** Retrieves a list of ranked characters for the given statistic, centered on the requested Character ID */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Characters ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetLeaderboardAroundCharacter(FClientGetLeaderboardAroundCharacterRequest request);

    /** Retrieves a list of all of the user's characters for the given statistic. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Characters ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetLeaderboardForUserCharacters(FClientGetLeaderboardForUsersCharactersRequest request);

    /** Grants the specified character type to the user. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Characters ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GrantCharacterToUser(FClientGrantCharacterToUserRequest request);

    /** Updates the values of the specified title-specific statistics for the specific character */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Characters ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UpdateCharacterStatistics(FClientUpdateCharacterStatisticsRequest request);



    ///////////////////////////////////////////////////////
    // Character Data
    //////////////////////////////////////////////////////
    /** Retrieves the title-specific custom data for the character which is readable and writable by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Character Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCharacterData(FClientGetCharacterDataRequest request);

    /** Retrieves the title-specific custom data for the character which can only be read by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Character Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetCharacterReadOnlyData(FClientGetCharacterDataRequest request);

    /** Creates and updates the title-specific custom data for the user's character which is readable  and writable by the client */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Character Data ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* UpdateCharacterData(FClientUpdateCharacterDataRequest request);



    ///////////////////////////////////////////////////////
    // Amazon-Specific APIs
    //////////////////////////////////////////////////////
    /** Validates with Amazon that the receipt for an Amazon App Store in-app purchase is valid and that it matches the purchased catalog item */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Amazon-Specific APIs ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* ValidateAmazonIAPReceipt(FClientValidateAmazonReceiptRequest request);



    ///////////////////////////////////////////////////////
    // Trading
    //////////////////////////////////////////////////////
    /** Accepts an open trade. If the call is successful, the offered and accepted items will be swapped between the two players' inventories. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Trading ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* AcceptTrade(FClientAcceptTradeRequest request);

    /** Cancels an open trade. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Trading ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* CancelTrade(FClientCancelTradeRequest request);

    /** Gets all trades the player has either opened or accepted, optionally filtered by trade status. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Trading ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetPlayerTrades(FClientGetPlayerTradesRequest request);

    /** Gets the current status of an existing trade. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Trading ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* GetTradeStatus(FClientGetTradeStatusRequest request);

    /** Opens a new outstanding trade. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Trading ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* OpenTrade(FClientOpenTradeRequest request);



    ///////////////////////////////////////////////////////
    // Advertising
    //////////////////////////////////////////////////////
    /** Attributes an install for advertisment. */
    UFUNCTION(BlueprintCallable, Category = "PlayFab | Client | Advertising ", meta = (BlueprintInternalUseOnly = "true"))
        static UPlayFabClientAPI* AttributeInstall(FClientAttributeInstallRequest request);



    /** PlayFab Request Info */
    FString PlayFabRequestURL;
    bool useSecretKey = false;
    bool useSessionTicket = false;
    bool cloudScript = false;
    bool isLoginRequest = false;

    /** Is the response valid JSON? */
    bool bIsValidJsonResponse;
    FString ResponseContent;
    int32 ResponseCode;

private:
    /** Internal bind function for the IHTTPRequest::OnProcessRequestCompleted() event */
    void OnProcessRequestComplete(FHttpRequestPtr Request, FHttpResponsePtr Response, bool bWasSuccessful);

	FDelegateOnSuccessLoginWithEmailAddress OnSuccessLoginWithEmailAddress;
	FDelegateOnFailureLoginWithEmailAddress OnFailureLoginWithEmailAddress;

	FDelegateOnSuccessRegisterPlayFabUser OnSuccessRegisterPlayFabUser;
	FDelegateOnFailureRegisterPlayFabUser OnFailureRegisterPlayFabUser;

protected:

    /** Internal request data stored as JSON */
    UPROPERTY()
        UPlayFabJsonObject* RequestJsonObj;

    /** Response data stored as JSON */
    UPROPERTY()
        UPlayFabJsonObject* ResponseJsonObj;

    /** Mapping of header section to values. Used to generate final header string for request */
    TMap<FString, FString> RequestHeaders;
};
